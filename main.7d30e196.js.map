{"version":3,"sources":["scripts/main.js"],"names":["API_URL","request","response","fetch","path","ok","Error","status","statusText","data","json","getPhones","Promise","race","resolve","reject","setTimeout","getPhoneDeatil","phoneId","parseIds","phones","ids","map","phone","id","getPhoneDeatils","phoneIds","all","createPhoneSelect","phonePicker","document","createElement","className","innerHTML","body","append","populatePhoneSelect","phoneDetails","phoneSelect","insertAdjacentHTML","name","phoneName","join","createInfoElement","phoneInfo","showPhoneInfo","details","selectedPhoneName","value","selectedPhone","find","innerText","description","generateDetailsInformer","getElementById","button","addEventListener","error"],"mappings":";AAAA,aAEA,MAAMA,EAAU,4DAEVC,EAAU,MAAA,IACRC,MAAAA,QAAiBC,SAASH,IAAUI,KAEtC,IAACF,EAASG,GACN,MAAA,IAAIC,SAASJ,EAASK,YAAYL,EAASM,cAK5CC,aAFYP,EAASQ,QAKxBC,EAAY,IAChBC,QAAQC,KAAK,CACXZ,EAAQ,gBACR,IAAIW,QAAQ,CAACE,EAASC,KACpBC,WACE,IAAMD,EAAO,IAAIT,MAAM,4CACvB,SAKFW,EAAkBC,GAAYjB,aAAmBiB,UAEjDC,EAAYC,IAGTC,OAFKD,EAAOE,IAAKC,GAAUA,EAAMC,KAKpCC,EAAmBC,GAChBd,QAAQe,IAAID,EAASJ,IAAKJ,GAAYD,EAAeC,KAGxDU,EAAoB,KAClBC,MAAAA,EAAcC,SAASC,cAAc,OAE3CF,EAAYG,UAAY,eAExBH,EAAYI,UAAa,2KAOzBH,SAASI,KAAKC,OAAON,IAGjBO,EAAsB,CAACC,EAAcC,KACzCA,EAAYC,mBACV,qBAEEF,EAAaf,IAAI,EAAGkB,KAAMC,+BACTA,gBACbA,4BAEHC,KAAK,QAINC,EAAoB,KAClBC,MAAAA,EAAYd,SAASC,cAAc,WAIlCa,OAFPA,EAAUZ,UAAY,aAEfY,GAGHC,EAAgB,CAACC,EAASF,EAAWN,KACnCS,MAAAA,EAAoBT,EAAYU,MAElC,IAACD,EACH,OAGIE,MAAAA,EAAgBH,EAAQI,KAC3B3B,GAAUA,EAAMiB,OAASO,GAG5BH,EAAUO,UAAYF,EAAcG,YACpCtB,SAASI,KAAKC,OAAOS,IAGjBS,EAA0B,UAC1B,IACIjC,MAAAA,QAAeT,IACfU,QAAYF,EAASC,GACrB0B,QAAgBrB,EAAgBJ,GAEhCiB,EAAcR,SAASwB,eAAe,eACtCC,EAASzB,SAASwB,eAAe,UACjCV,EAAYD,IAElBP,EAAoBU,EAASR,GAE7BiB,EAAOC,iBAAiB,QAAS,KAC/BX,EAAcC,EAASF,EAAWN,KAEpC,MAAOmB,GACA,MAAA,oBAIX7B,IACAyB","file":"main.7d30e196.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst API_URL = 'https://mate-academy.github.io/phone-catalogue-static/api';\n\nconst request = async (path) => {\n  const response = await fetch(`${API_URL}${path}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  const data = await response.json();\n\n  return data;\n};\n\nconst getPhones = () =>\n  Promise.race([\n    request('/phones.json'),\n    new Promise((resolve, reject) => {\n      setTimeout(\n        () => reject(new Error('Takes too long to get the data from API')),\n        5000\n      );\n    }),\n  ]);\n\nconst getPhoneDeatil = (phoneId) => request(`/phones/${phoneId}.json`);\n\nconst parseIds = (phones) => {\n  const ids = phones.map((phone) => phone.id);\n\n  return ids;\n};\n\nconst getPhoneDeatils = (phoneIds) => {\n  return Promise.all(phoneIds.map((phoneId) => getPhoneDeatil(phoneId)));\n};\n\nconst createPhoneSelect = () => {\n  const phonePicker = document.createElement('div');\n\n  phonePicker.className = 'phone-picker';\n\n  phonePicker.innerHTML = `\n  <select name=\"phones\" size=\"4\" id=\"phoneSelect\">\n    <option value=\"\">Please choose a phone</option>\n  </select>\n\n  <button id=\"button\">Show phone info</button>`;\n\n  document.body.append(phonePicker);\n};\n\nconst populatePhoneSelect = (phoneDetails, phoneSelect) => {\n  phoneSelect.insertAdjacentHTML(\n    'beforeend',\n    `\n    ${phoneDetails.map(({ name: phoneName }) => `\n      <option value=\"${phoneName}\">\n        ${phoneName}\n      </option>\n    `).join('')}`\n  );\n};\n\nconst createInfoElement = () => {\n  const phoneInfo = document.createElement('article');\n\n  phoneInfo.className = 'phone-info';\n\n  return phoneInfo;\n};\n\nconst showPhoneInfo = (details, phoneInfo, phoneSelect) => {\n  const selectedPhoneName = phoneSelect.value;\n\n  if (!selectedPhoneName) {\n    return;\n  }\n\n  const selectedPhone = details.find(\n    (phone) => phone.name === selectedPhoneName\n  );\n\n  phoneInfo.innerText = selectedPhone.description;\n  document.body.append(phoneInfo);\n};\n\nconst generateDetailsInformer = async () => {\n  try {\n    const phones = await getPhones();\n    const ids = await parseIds(phones);\n    const details = await getPhoneDeatils(ids);\n\n    const phoneSelect = document.getElementById('phoneSelect');\n    const button = document.getElementById('button');\n    const phoneInfo = createInfoElement();\n\n    populatePhoneSelect(details, phoneSelect);\n\n    button.addEventListener('click', () => {\n      showPhoneInfo(details, phoneInfo, phoneSelect);\n    });\n  } catch (error) {\n    return 'Proccesed error';\n  }\n};\n\ncreatePhoneSelect();\ngenerateDetailsInformer();\n"]}